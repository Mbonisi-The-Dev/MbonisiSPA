{"ast":null,"code":"import { retry, catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class People {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n\n  init(_data) {\n    if (_data) {\n      this.name = _data[\"name\"];\n      this.gender = _data[\"gender\"];\n      this.birthYear = _data[\"birthYear\"];\n      this.skinColor = _data[\"skinColor\"];\n      this.height = _data[\"height\"];\n      this.homeworld = _data[\"homeworld\"];\n      this.mass = _data[\"mass\"];\n      this.hairColor = _data[\"hairColor\"];\n      this.eyeColor = _data[\"eyeColor\"];\n\n      if (Array.isArray(_data[\"films\"])) {\n        this.films = [];\n\n        for (let item of _data[\"films\"]) this.films.push(item);\n      }\n\n      if (Array.isArray(_data[\"species\"])) {\n        this.species = [];\n\n        for (let item of _data[\"species\"]) this.species.push(item);\n      }\n\n      if (Array.isArray(_data[\"vehicles\"])) {\n        this.vehicles = [];\n\n        for (let item of _data[\"vehicles\"]) this.vehicles.push(item);\n      }\n\n      if (Array.isArray(_data[\"starships\"])) {\n        this.starships = [];\n\n        for (let item of _data[\"starships\"]) this.starships.push(item);\n      }\n\n      this.created = _data[\"created\"] ? new Date(_data[\"created\"].toString()) : undefined;\n      this.edited = _data[\"edited\"] ? new Date(_data[\"edited\"].toString()) : undefined;\n      this.url = _data[\"url\"];\n    }\n  }\n\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new People();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n    data[\"name\"] = this.name;\n    data[\"gender\"] = this.gender;\n    data[\"birthYear\"] = this.birthYear;\n    data[\"skinColor\"] = this.skinColor;\n    data[\"height\"] = this.height;\n    data[\"homeworld\"] = this.homeworld;\n    data[\"mass\"] = this.mass;\n    data[\"hairColor\"] = this.hairColor;\n    data[\"eyeColor\"] = this.eyeColor;\n\n    if (Array.isArray(this.films)) {\n      data[\"films\"] = [];\n\n      for (let item of this.films) data[\"films\"].push(item);\n    }\n\n    if (Array.isArray(this.species)) {\n      data[\"species\"] = [];\n\n      for (let item of this.species) data[\"species\"].push(item);\n    }\n\n    if (Array.isArray(this.vehicles)) {\n      data[\"vehicles\"] = [];\n\n      for (let item of this.vehicles) data[\"vehicles\"].push(item);\n    }\n\n    if (Array.isArray(this.starships)) {\n      data[\"starships\"] = [];\n\n      for (let item of this.starships) data[\"starships\"].push(item);\n    }\n\n    data[\"created\"] = this.created ? this.created.toISOString() : undefined;\n    data[\"edited\"] = this.edited ? this.edited.toISOString() : undefined;\n    data[\"url\"] = this.url;\n    return data;\n  }\n\n}\nexport class Chuck {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n\n  init(_data) {\n    if (_data) {\n      this.category = _data[\"category\"];\n    }\n  }\n\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new Chuck();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n    data[\"category\"] = this.category;\n    return data;\n  }\n\n}\nexport class Joke {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n\n  init(_data) {\n    if (_data) {\n      if (Array.isArray(_data[\"categories\"])) {\n        this.categories = [];\n\n        for (let item of _data[\"categories\"]) this.categories.push(item);\n      }\n\n      this.id = _data[\"id\"];\n      this.url = _data[\"url\"];\n      this.value = _data[\"value\"];\n    }\n  }\n\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new Joke();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n\n    if (Array.isArray(this.categories)) {\n      data[\"categories\"] = [];\n\n      for (let item of this.categories) data[\"categories\"].push(item);\n    }\n\n    data[\"id\"] = this.id;\n    data[\"url\"] = this.url;\n    data[\"value\"] = this.value;\n    return data;\n  }\n\n} //Export class for Joke\n\nexport class Search {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n\n  init(_data) {\n    if (_data) {\n      if (Array.isArray(_data[\"people\"])) {\n        this.people = [];\n\n        for (let item of _data[\"people\"]) this.people.push(People.fromJS(item));\n      }\n\n      if (Array.isArray(_data[\"jokes\"])) {\n        this.jokes = [];\n\n        for (let item of _data[\"jokes\"]) this.jokes.push(Joke.fromJS(item));\n      }\n    }\n  }\n\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new Search();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n\n    if (Array.isArray(this.people)) {\n      data[\"people\"] = [];\n\n      for (let item of this.people) data[\"people\"].push(item.toJSON());\n    }\n\n    if (Array.isArray(this.jokes)) {\n      data[\"jokes\"] = [];\n\n      for (let item of this.jokes) data[\"jokes\"].push(item.toJSON());\n    }\n\n    return data;\n  }\n\n}\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.endpoint = 'https://localhost:44394';\n      this.httpHeader = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getPeople() {\n      return this.httpClient.get(this.endpoint + '/Swapi').pipe(retry(1), catchError(this.processError));\n    }\n\n    getChuck() {\n      return this.httpClient.get(this.endpoint + '/Chuck').pipe(retry(1), catchError(this.processError));\n    }\n\n    getChuckCategory(name) {\n      return this.httpClient.get(this.endpoint + '/Chuck/Search/' + name).pipe(retry(1), catchError(this.processError));\n    }\n\n    getSearch(name) {\n      return this.httpClient.get(this.endpoint + '/Search?name=' + name).pipe(retry(1), catchError(this.processError));\n    }\n\n    processError(err) {\n      let message = '';\n\n      if (err.error instanceof ErrorEvent) {\n        message = err.error.message;\n      } else {\n        message = `Error Code: ${err.status}\\nMessage: ${err.message}`;\n      }\n\n      console.log(message);\n      return throwError(message);\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}