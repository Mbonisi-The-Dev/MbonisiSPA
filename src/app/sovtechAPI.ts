/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.12.1.0 (NJsonSchema v10.4.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch, retry } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module sovtechs {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable(
   //providedIn: 'root'
)
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
        baseUrl = "https://localhost:44394";
    }

    httpHeader = {
        headers: new HttpHeaders({
          'Content-Type': 'application/json'
        })
      } 

    /**
     * @return Success
     */
    categories(): Observable<Chuck[]> {
        let url_ = this.baseUrl + "/Categories";
        //let url_ = "" + "/Categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategories(<any>response_);
                } catch (e) {
                    return <Observable<Chuck[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Chuck[]>><any>_observableThrow(response_);
        }));
    }

    protected processCategories(response: HttpResponseBase): Observable<Chuck[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Chuck.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf();
        //return _observableOf(null);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    search(name: string | null | undefined): Observable<Search> {
        let url_ = this.baseUrl + "/Search?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(<any>response_);
                } catch (e) {
                    return <Observable<Search>><any>_observableThrow(e);
                }
            } else
                return <Observable<Search>><any>_observableThrow(response_);
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<Search> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Search.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf();
        //return _observableOf(null);
    }

    /**
     * @return Success
     */
    people(): Observable<People[]> {
        //let url_ = this.baseUrl + "/Swapi/People";
        let url_ = this.baseUrl + "/Swapi/People";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPeople(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPeople(<any>response_);
                } catch (e) {
                    return <Observable<People[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<People[]>><any>_observableThrow(response_);
        }));
    }

    protected processPeople(response: HttpResponseBase): Observable<People[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(People.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf();
        //return _observableOf(null);
    }
}

export class Chuck implements IChuck {
    category?: string | undefined;

    constructor(data?: IChuck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): Chuck {
        data = typeof data === 'object' ? data : {};
        let result = new Chuck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        return data; 
    }
}

export interface IChuck {
    category?: string | undefined;
}

export class People implements IPeople {
    name?: string | undefined;
    gender?: string | undefined;
    birthYear?: string | undefined;
    skinColor?: string | undefined;
    height?: string | undefined;
    homeworld?: string | undefined;
    mass?: string | undefined;
    hairColor?: string | undefined;
    eyeColor?: string | undefined;
    films?: string[] | undefined;
    species?: string[] | undefined;
    vehicles?: string[] | undefined;
    starships?: string[] | undefined;
    created?: Date;
    edited?: Date;
    url?: string | undefined;

    constructor(data?: IPeople) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.birthYear = _data["birthYear"];
            this.skinColor = _data["skinColor"];
            this.height = _data["height"];
            this.homeworld = _data["homeworld"];
            this.mass = _data["mass"];
            this.hairColor = _data["hairColor"];
            this.eyeColor = _data["eyeColor"];
            if (Array.isArray(_data["films"])) {
                this.films = [] as any;
                for (let item of _data["films"])
                    this.films!.push(item);
            }
            if (Array.isArray(_data["species"])) {
                this.species = [] as any;
                for (let item of _data["species"])
                    this.species!.push(item);
            }
            if (Array.isArray(_data["vehicles"])) {
                this.vehicles = [] as any;
                for (let item of _data["vehicles"])
                    this.vehicles!.push(item);
            }
            if (Array.isArray(_data["starships"])) {
                this.starships = [] as any;
                for (let item of _data["starships"])
                    this.starships!.push(item);
            }
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.edited = _data["edited"] ? new Date(_data["edited"].toString()) : <any>undefined;
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): People {
        data = typeof data === 'object' ? data : {};
        let result = new People();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["birthYear"] = this.birthYear;
        data["skinColor"] = this.skinColor;
        data["height"] = this.height;
        data["homeworld"] = this.homeworld;
        data["mass"] = this.mass;
        data["hairColor"] = this.hairColor;
        data["eyeColor"] = this.eyeColor;
        if (Array.isArray(this.films)) {
            data["films"] = [];
            for (let item of this.films)
                data["films"].push(item);
        }
        if (Array.isArray(this.species)) {
            data["species"] = [];
            for (let item of this.species)
                data["species"].push(item);
        }
        if (Array.isArray(this.vehicles)) {
            data["vehicles"] = [];
            for (let item of this.vehicles)
                data["vehicles"].push(item);
        }
        if (Array.isArray(this.starships)) {
            data["starships"] = [];
            for (let item of this.starships)
                data["starships"].push(item);
        }
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["edited"] = this.edited ? this.edited.toISOString() : <any>undefined;
        data["url"] = this.url;
        return data; 
    }
}

export interface IPeople {
    name?: string | undefined;
    gender?: string | undefined;
    birthYear?: string | undefined;
    skinColor?: string | undefined;
    height?: string | undefined;
    homeworld?: string | undefined;
    mass?: string | undefined;
    hairColor?: string | undefined;
    eyeColor?: string | undefined;
    films?: string[] | undefined;
    species?: string[] | undefined;
    vehicles?: string[] | undefined;
    starships?: string[] | undefined;
    created?: Date;
    edited?: Date;
    url?: string | undefined;
}

export class Joke implements IJoke {
    categories?: string[] | undefined;
    id?: string | undefined;
    url?: string | undefined;
    value?: string | undefined;

    constructor(data?: IJoke) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            this.id = _data["id"];
            this.url = _data["url"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Joke {
        data = typeof data === 'object' ? data : {};
        let result = new Joke();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["id"] = this.id;
        data["url"] = this.url;
        data["value"] = this.value;
        return data; 
    }
}

export interface IJoke {
    categories?: string[] | undefined;
    id?: string | undefined;
    url?: string | undefined;
    value?: string | undefined;
}

export class Search implements ISearch {
    people?: People[] | undefined;
    jokes?: Joke[] | undefined;

    constructor(data?: ISearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(People.fromJS(item));
            }
            if (Array.isArray(_data["jokes"])) {
                this.jokes = [] as any;
                for (let item of _data["jokes"])
                    this.jokes!.push(Joke.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Search {
        data = typeof data === 'object' ? data : {};
        let result = new Search();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        if (Array.isArray(this.jokes)) {
            data["jokes"] = [];
            for (let item of this.jokes)
                data["jokes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISearch {
    people?: People[] | undefined;
    jokes?: Joke[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}